// Copyright (C) Codeplay Software Limited
//
// Licensed under the Apache License, Version 2.0 (the "License") with LLVM
// Exceptions; you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

/// @file
///
/// @brief

#ifndef UUR_CHECKS_H_INCLUDED
#define UUR_CHECKS_H_INCLUDED

#include "gtest/gtest.h"
#include "ur_api.h"

namespace uur {
struct Result {
  Result(ur_result_t result) : value(result) {}

  bool operator==(const Result &rhs) const { return value == rhs.value; }

  ur_result_t value;
};

inline std::ostream &operator<<(std::ostream &out, const ur_result_t &result) {
  switch (result) {
#define CASE(VALUE) \
  case VALUE:       \
    out << #VALUE;  \
    break;

    CASE(UR_RESULT_SUCCESS)
    CASE(UR_RESULT_ERROR_INVALID_KERNEL_NAME)
    CASE(UR_RESULT_ERROR_INVALID_OPERATION)
    CASE(UR_RESULT_ERROR_INVALID_KERNEL)
    CASE(UR_RESULT_ERROR_INVALID_QUEUE_PROPERTIES)
    CASE(UR_RESULT_ERROR_INVALID_VALUE)
    CASE(UR_RESULT_ERROR_INVALID_CONTEXT)
    CASE(UR_RESULT_ERROR_INVALID_PLATFORM)
    CASE(UR_RESULT_ERROR_INVALID_DEVICE)
    CASE(UR_RESULT_ERROR_INVALID_BINARY)
    CASE(UR_RESULT_ERROR_INVALID_QUEUE)
    CASE(UR_RESULT_ERROR_OUT_OF_HOST_MEMORY)
    CASE(UR_RESULT_ERROR_INVALID_PROGRAM)
    CASE(UR_RESULT_ERROR_INVALID_PROGRAM_EXECUTABLE)
    CASE(UR_RESULT_ERROR_INVALID_SAMPLER)
    CASE(UR_RESULT_ERROR_INVALID_BUFFER_SIZE)
    CASE(UR_RESULT_ERROR_INVALID_MEM_OBJECT)
    CASE(UR_RESULT_ERROR_OUT_OF_RESOURCES)
    CASE(UR_RESULT_ERROR_INVALID_EVENT)
    CASE(UR_RESULT_ERROR_INVALID_EVENT_WAIT_LIST)
    CASE(UR_RESULT_ERROR_MISALIGNED_SUB_BUFFER_OFFSET)
    CASE(UR_RESULT_ERROR_INVALID_WORK_GROUP_SIZE)
    CASE(UR_RESULT_ERROR_COMPILER_NOT_AVAILABLE)
    CASE(UR_RESULT_ERROR_PROFILING_INFO_NOT_AVAILABLE)
    CASE(UR_RESULT_ERROR_DEVICE_NOT_FOUND)
    CASE(UR_RESULT_ERROR_INVALID_WORK_ITEM_SIZE)
    CASE(UR_RESULT_ERROR_INVALID_WORK_DIMENSION)
    CASE(UR_RESULT_ERROR_INVALID_KERNEL_ARGS)
    CASE(UR_RESULT_ERROR_INVALID_IMAGE_SIZE)
    CASE(UR_RESULT_ERROR_INVALID_IMAGE_FORMAT_DESCRIPTOR)
    CASE(UR_RESULT_ERROR_IMAGE_FORMAT_NOT_SUPPORTED)
    CASE(UR_RESULT_ERROR_MEM_OBJECT_ALLOCATION_FAILURE)
    CASE(UR_RESULT_ERROR_UNINITIALIZED)
    CASE(UR_RESULT_ERROR_DEVICE_LOST)
    CASE(UR_RESULT_ERROR_OUT_OF_DEVICE_MEMORY)
    CASE(UR_RESULT_ERROR_PROGRAM_BUILD_FAILURE)
    CASE(UR_RESULT_ERROR_PROGRAM_LINK_FAILURE)
    CASE(UR_RESULT_ERROR_DEVICE_REQUIRES_RESET)
    CASE(UR_RESULT_ERROR_DEVICE_IN_LOW_POWER_STATE)
    CASE(UR_RESULT_ERROR_UNSUPPORTED_VERSION)
    CASE(UR_RESULT_ERROR_UNSUPPORTED_FEATURE)
    CASE(UR_RESULT_ERROR_INVALID_ARGUMENT)
    CASE(UR_RESULT_ERROR_INVALID_NULL_HANDLE)
    CASE(UR_RESULT_ERROR_HANDLE_OBJECT_IN_USE)
    CASE(UR_RESULT_ERROR_INVALID_NULL_POINTER)
    CASE(UR_RESULT_ERROR_INVALID_SIZE)
    CASE(UR_RESULT_ERROR_UNSUPPORTED_SIZE)
    CASE(UR_RESULT_ERROR_UNSUPPORTED_ALIGNMENT)
    CASE(UR_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT)
    CASE(UR_RESULT_ERROR_INVALID_ENUMERATION)
    CASE(UR_RESULT_ERROR_UNSUPPORTED_ENUMERATION)
    CASE(UR_RESULT_ERROR_UNSUPPORTED_IMAGE_FORMAT)
    CASE(UR_RESULT_ERROR_INVALID_NATIVE_BINARY)
    CASE(UR_RESULT_ERROR_INVALID_GLOBAL_NAME)
    CASE(UR_RESULT_ERROR_INVALID_FUNCTION_NAME)
    CASE(UR_RESULT_ERROR_INVALID_GROUP_SIZE_DIMENSION)
    CASE(UR_RESULT_ERROR_INVALID_GLOBAL_WIDTH_DIMENSION)
    CASE(UR_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_INDEX)
    CASE(UR_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_SIZE)
    CASE(UR_RESULT_ERROR_INVALID_KERNEL_ATTRIBUTE_VALUE)
    CASE(UR_RESULT_ERROR_PROGRAM_UNLINKED)
    CASE(UR_RESULT_ERROR_OVERLAPPING_REGIONS)
    CASE(UR_RESULT_ERROR_INVALID_HOST_PTR)
    CASE(UR_RESULT_ERROR_INVALID_USM_SIZE)
    CASE(UR_RESULT_ERROR_OBJECT_ALLOCATION_FAILURE)
    CASE(UR_RESULT_ERROR_UNKNOWN)
    CASE(UR_RESULT_FORCE_UINT32)

#undef CASE
    default:
      out << "unknown ur_result_t: " << result;
      break;
  }
  return out;
}

inline std::ostream &operator<<(std::ostream &out, const Result &result) {
  out << result.value;
  return out;
}
}  // namespace uur

#ifndef ASSERT_EQ_RESULT
#define ASSERT_EQ_RESULT(EXPECTED, ACTUAL) \
  ASSERT_EQ(uur::Result(EXPECTED), uur::Result(ACTUAL))
#endif
#ifndef ASSERT_SUCCESS
#define ASSERT_SUCCESS(ACTUAL) ASSERT_EQ_RESULT(UR_RESULT_SUCCESS, ACTUAL)
#endif

#ifndef EXPECT_EQ_RESULT
#define EXPECT_EQ_RESULT(EXPECTED, ACTUAL) \
  EXPECT_EQ(uur::Result(EXPECTED), uur::Result(ACTUAL))
#endif
#ifndef EXPECT_SUCCESS
#define EXPECT_SUCCESS(ACTUAL) EXPECT_EQ_RESULT(UR_RESULT_SUCCESS, ACTUAL)
#endif

#endif  // UUR_CHECKS_H_INCLUDED
