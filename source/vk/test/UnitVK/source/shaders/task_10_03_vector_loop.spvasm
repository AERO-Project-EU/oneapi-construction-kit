; SPIR-V
; Version: 1.0
; Generator: Codeplay; 0
; Bound: 78        
; Schema: 0
	OpCapability Shader
	OpCapability VariablePointers
	OpExtension "SPV_KHR_storage_buffer_storage_class"
	OpExtension "SPV_KHR_variable_pointers"
	OpMemoryModel Logical GLSL450
	OpEntryPoint GLCompute %30 "vector_loop" %21 %27
	OpSource OpenCL_C 120
	OpDecorate %22 SpecId 0
	OpDecorate %23 SpecId 1
	OpDecorate %24 SpecId 2
	OpDecorate %3 ArrayStride 4
	OpMemberDecorate %4 0 Offset 0
	OpDecorate %4 Block
	OpDecorate %21 BuiltIn GlobalInvocationId
	OpDecorate %25 BuiltIn WorkgroupSize
	OpDecorate %27 BuiltIn NumWorkgroups
	OpDecorate %28 DescriptorSet 0
	OpDecorate %28 Binding 0
	OpDecorate %29 DescriptorSet 0
	OpDecorate %29 Binding 1
%1 = 	OpTypeInt 32 0
%2 = 	OpTypePointer StorageBuffer %1
%3 = 	OpTypeRuntimeArray %1
%4 = 	OpTypeStruct %3
%5 = 	OpTypePointer StorageBuffer %4
%6 = 	OpTypeVoid
%7 = 	OpTypeFunction %6
%8 = 	OpTypeVector %1 3
%9 = 	OpTypePointer Input %8
%10 = 	OpTypePointer Input %1
%11 = 	OpTypeBool
%12 = 	OpTypePointer Private %8
%13 = 	OpTypePointer Private %1
%14 = 	OpTypeVector %1 4
%15 = 	OpTypeVector %11 4
%16 = 	OpConstant %1 0
%17 = 	OpUndef %14
%18 = 	OpConstantNull %14
%19 = 	OpConstant %1 1
%20 = 	OpConstantComposite %14 %19 %19 %19 %19
%21 = 	OpVariable %9 Input
%22 = 	OpSpecConstant %1 1
%23 = 	OpSpecConstant %1 1
%24 = 	OpSpecConstant %1 1
%25 = 	OpSpecConstantComposite %8 %22 %23 %24
%26 = 	OpVariable %12 Private %25
%27 = 	OpVariable %9 Input
%28 = 	OpVariable %5 StorageBuffer
%29 = 	OpVariable %5 StorageBuffer
%30 = 	OpFunction %6 None %7
%31 = 	OpLabel
%32 = 	OpAccessChain %10 %21 %16
%33 = 	OpLoad %1 %32
%34 = 	OpIEqual %11 %33 %16
	OpSelectionMerge %77 None
	OpBranchConditional %34 %35 %77
%35 = 	OpLabel
%36 = 	OpAccessChain %13 %26 %16
%37 = 	OpLoad %1 %36
%38 = 	OpAccessChain %10 %27 %16
%39 = 	OpLoad %1 %38
%40 = 	OpIMul %1 %39 %37
%41 = 	OpCompositeInsert %14 %40 %17 0
%42 = 	OpVectorShuffle %14 %41 %17 0 0 0 0
%43 = 	OpSGreaterThan %15 %42 %18
%44 = 	OpCompositeExtract %11 %43 0
	OpSelectionMerge %76 None
	OpBranchConditional %44 %45 %76
%45 = 	OpLabel
	OpBranch %46
%46 = 	OpLabel
%47 = 	OpPhi %14 %64 %46 %18 %45
%48 = 	OpCompositeExtract %1 %47 0
%49 = 	OpAccessChain %2 %28 %16 %48
%50 = 	OpLoad %1 %49
%51 = 	OpAccessChain %2 %29 %16 %48
	OpStore %51 %50
%52 = 	OpCompositeExtract %1 %47 1
%53 = 	OpAccessChain %2 %28 %16 %52
%54 = 	OpLoad %1 %53
%55 = 	OpAccessChain %2 %29 %16 %52
	OpStore %55 %54
%56 = 	OpCompositeExtract %1 %47 2
%57 = 	OpAccessChain %2 %28 %16 %56
%58 = 	OpLoad %1 %57
%59 = 	OpAccessChain %2 %29 %16 %56
	OpStore %59 %58
%60 = 	OpCompositeExtract %1 %47 3
%61 = 	OpAccessChain %2 %28 %16 %60
%62 = 	OpLoad %1 %61
%63 = 	OpAccessChain %2 %29 %16 %60
	OpStore %63 %62
%64 = 	OpIAdd %14 %47 %20
%65 = 	OpAccessChain %13 %26 %16
%66 = 	OpLoad %1 %65
%67 = 	OpAccessChain %10 %27 %16
%68 = 	OpLoad %1 %67
%69 = 	OpIMul %1 %68 %66
%70 = 	OpCompositeInsert %14 %69 %17 0
%71 = 	OpVectorShuffle %14 %70 %17 0 0 0 0
%72 = 	OpSLessThan %15 %64 %71
%73 = 	OpCompositeExtract %11 %72 0
%74 = 	OpLogicalNot %11 %73
	OpLoopMerge %75 %46 None
	OpBranchConditional %74 %75 %46
%75 = 	OpLabel
	OpBranch %76
%76 = 	OpLabel
	OpBranch %77
%77 = 	OpLabel
	OpReturn
	OpFunctionEnd
