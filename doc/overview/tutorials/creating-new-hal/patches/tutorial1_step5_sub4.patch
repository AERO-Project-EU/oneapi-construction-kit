diff --git a/include/refsi_hal.h b/include/refsi_hal.h
index cd2667c..e16389d 100644
--- a/include/refsi_hal.h
+++ b/include/refsi_hal.h
@@ -93,7 +93,8 @@ class refsi_hal_device : public hal::hal_device_t {
   bool populateSchedulingInfo(wg_info_t &wg,
                               const hal::hal_ndrange_t &range,
                               uint32_t work_dim);
-  hal::hal_addr_t allocateKUB(const exec_state_t &exec,
+  hal::hal_addr_t allocateKUB(const hal::hal_arg_t *args, uint32_t num_args,
+                              const exec_state_t &exec,
                               hal::hal_size_t &kub_desc,
                               hal::hal_size_t &tsd_info);
 
diff --git a/source/refsi_hal.cpp b/source/refsi_hal.cpp
index bfa1488..3a22b6f 100644
--- a/source/refsi_hal.cpp
+++ b/source/refsi_hal.cpp
@@ -20,6 +20,7 @@
 
 #include <memory>
 
+#include "arg_pack.h"
 #include "elf_loader.h"
 #include "refsi_command_buffer.h"
 
@@ -88,7 +89,9 @@ bool refsi_hal_device::populateSchedulingInfo(wg_info_t &wg,
   return true;
 }
 
-hal::hal_addr_t refsi_hal_device::allocateKUB(const exec_state_t &exec,
+hal::hal_addr_t refsi_hal_device::allocateKUB(const hal::hal_arg_t *args,
+                                              uint32_t num_args,
+                                              const exec_state_t &exec,
                                               hal::hal_size_t &kub_desc,
                                               hal::hal_size_t &tsd_info) {
   auto alignBuffer = [](std::vector<uint8_t> &buffer, uint64_t align) {
@@ -97,6 +100,15 @@ hal::hal_addr_t refsi_hal_device::allocateKUB(const exec_state_t &exec,
   };
   std::vector<uint8_t> kub_data;
 
+  // Pack arguments.
+  hal::util::hal_argpack_t packer(64);
+  if (!packer.build(args, num_args)) {
+    return false;
+  }
+  kub_data.resize(packer.size());
+  memcpy(kub_data.data(), packer.data(), packer.size());
+  alignBuffer(kub_data, sizeof(uint64_t));
+
   // Pack work-group scheduling info into the KUB.
   uint64_t sched_offset = kub_data.size();
   uint64_t sched_size = sizeof(exec_state_t);
@@ -145,8 +157,10 @@ bool refsi_hal_device::kernel_exec(hal::hal_program_t program,
     return false;
   }
   hal::hal_size_t kub_desc = 0;
+  hal::hal_size_t kargs_info = 0;
   hal::hal_size_t tsd_info = 0;
-  hal::hal_addr_t kub_addr = allocateKUB(exec, kub_desc, tsd_info);
+  hal::hal_addr_t kub_addr =
+      allocateKUB(args, num_args, exec, kub_desc, tsd_info);
   if (!kub_addr) {
     return false;
   }
@@ -157,6 +171,7 @@ bool refsi_hal_device::kernel_exec(hal::hal_program_t program,
   cb.addWRITE_REG64(CMP_REG_ENTRY_PT_FN, kernel_wrapper->symbol);
   cb.addWRITE_REG64(CMP_REG_RETURN_ADDR, elf->find_symbol("kernel_exit"));
   cb.addWRITE_REG64(CMP_REG_KUB_DESC, kub_desc);
+  cb.addWRITE_REG64(CMP_REG_KARGS_INFO, kargs_info);
   cb.addWRITE_REG64(CMP_REG_TSD_INFO, tsd_info);
   cb.addRUN_KERNEL_SLICE(0, num_instances, 0);
   cb.addFINISH();
