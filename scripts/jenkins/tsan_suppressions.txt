# Copyright (C) Codeplay Software Limited
#
# Licensed under the Apache License, Version 2.0 (the "License") with LLVM
# Exceptions; you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://github.com/uxlfoundation/oneapi-construction-kit/blob/main/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

# See https://github.com/google/sanitizers/wiki/ThreadSanitizerSuppressions
# The path to this file needs to be exported at runtime using TSAN_OPTIONS
# e.g TSAN_OPTIONS="suppressions=/path/to/tsan_suppressions.txt" a.out

# Ignore thread leaks and data races from CTS tests not joining created threads
# before exiting main.
thread:ThreadPool_Init
race:ThreadPool_Exit

# Ignore data races from CTS integer_ops test when seeding the initial data.
race:genrand_int32

# Ignore races in LLVM/Clang around timing passes, as this seems to have global
# state, not per-LLVMContext state. The global variables are bools, that seem
# to always get written with the same values in our uses.  So the write/read
# data race is extremely theoretical, but extremely hard to lock as the
# LLVM/Clang global variable can be accessed from separate LLVMContext.
race:llvm::TimePassesIsEnabled
race:clang::FrontendTimesIsEnabled
race:llvm::TimePassesPerRun
race:clang::TimePassesPerRun
