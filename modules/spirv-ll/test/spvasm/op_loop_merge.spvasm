; Copyright (C) Codeplay Software Limited. All Rights Reserved.

; RUN: %pp-llvm-ver -o %t.pp < %s --llvm-ver %LLVMVER
; RUN: %spirv-ll -a Vulkan -c Float64 -c Int64 %p/op_loop_merge.spv -o %t
; RUN: %filecheck < %t %t.pp
            OpCapability Shader
            OpCapability Float64
            OpCapability Int64
       %1 = OpExtInstImport "GLSL.std.450"
            OpMemoryModel Logical GLSL450
            OpEntryPoint GLCompute %main "main"
            OpExecutionMode %main LocalSize 1 1 1
            OpSource GLSL 450
            OpName %main "main"
            OpName %a "a"
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
        %int = OpTypeInt 32 1
%_ptr_Function_int = OpTypePointer Function %int
      %int_42 = OpConstant %int 42
      %int_0 = OpConstant %int 0
       %bool = OpTypeBool
      %int_1 = OpConstant %int 1
       %main = OpFunction %void None %3
          %5 = OpLabel
          %a = OpVariable %_ptr_Function_int Function
               OpStore %a %int_42
               OpBranch %10
         %10 = OpLabel
               OpLoopMerge %12 %13 Unroll
               OpBranch %14
         %14 = OpLabel
         %15 = OpLoad %int %a
         %18 = OpSGreaterThan %bool %15 %int_0
               OpBranchConditional %18 %11 %12 5 2
         %11 = OpLabel
         %19 = OpLoad %int %a
         %21 = OpISub %int %19 %int_1
               OpStore %a %21
               OpBranch %13
         %13 = OpLabel
               OpBranch %10
         %12 = OpLabel
               OpReturn
               OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: define spir_kernel void @main()
; CHECK: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = alloca i32
; CHECK-GE15: store i32 42, ptr {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK-LT15: store i32 42, i32* {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK: br label {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK: {{[0-9]+:}}
; CHECK: br label {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK: {{[0-9]+:}}
; CHECK-GE15: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = load i32, ptr {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK-LT15: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = load i32, i32* {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = icmp sgt i32 {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}, 0
; CHECK: br i1 {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}, label {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}, label {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}, !prof !1
; CHECK: {{[0-9]+:}}
; CHECK-GE15: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = load i32, ptr {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK-LT15: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = load i32, i32* {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = sub i32 {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}, 1
; CHECK-GE15: store i32 {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}, ptr {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK-LT15: store i32 {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}, i32* {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK: br label {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK: {{[0-9]+:}}
; CHECK: br label {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}, !llvm.loop !2
; CHECK: {{[0-9]+:}}
; CHECK: ret void
; CHECK: !llvm.ident = !{!0}
; CHECK: !0 = !{!"Source language: GLSL, Version: 450"}
; CHECK: !1 = !{!"branch_weights", i32 5, i32 2}
; CHECK: !2 = distinct !{!2, !3}
; CHECK: !3 = !{!"llvm.loop.unroll.enable"}
