// Copyright (C) Codeplay Software Limited. All Rights Reserved.

/// @file
///
/// @brief Transform the pattern generated by ternary operators to a
/// vectorizable instruction set
///
/// @copyright Copyright (C) Codeplay Software Limited. All Rights Reserved.

#ifndef VECZ_TRANSFORM_TERNARY_TRANSFORM_PASS_H_INCLUDED
#define VECZ_TRANSFORM_TERNARY_TRANSFORM_PASS_H_INCLUDED

#include <llvm/IR/PassManager.h>

namespace vecz {

/// @brief This pass tries to transform selects with pointer operands,
/// transforms to individual GEPs followed by masked memory operations.
class TernaryTransformPass : public llvm::PassInfoMixin<TernaryTransformPass> {
 public:
  TernaryTransformPass() = default;

  /// @brief The entry point to the pass.
  //
  /// @param[in] F Function to optimize.
  /// @param[in] AM FunctionAnalysisManager providing analyses.
  //
  /// @return The preserved analyses.
  llvm::PreservedAnalyses run(llvm::Function &F,
                              llvm::FunctionAnalysisManager &AM);

  // @brief Pass name.
  static llvm::StringRef name() { return "Ternary transform pass"; }
};
}  // namespace vecz

#endif  // VECZ_TRANSFORM_TERNARY_TRANSFORM_PASS_H_INCLUDED
