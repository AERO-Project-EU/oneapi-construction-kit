# Copyright Codeplay Software Limited. All rights reserved

import lit.util

def if_enabled(config, if_true=True, if_false=False):
    return lit.util.pythonize_bool(config) and if_true or if_false

# Paths to helper utilities, set during cmake configuration
config.tool_paths = {
    'clc': '@clc_EXECUTABLE@',
    'muxc': '@muxc_EXECUTABLE@',    
    'llvm-objdump': '@llvm-objdump_EXECUTABLE@',
}

# Defer to the common lit configuration to set up the bulk of the config.
common_lit_cfg_path = os.path.join('@PROJECT_BINARY_DIR@', 'modules',
                                   'lit', 'lit.common.cfg')

lit_config.load_config(config, common_lit_cfg_path)

config.test_exec_root = '@CURRENT_BINARY_DIR@'

config.ca_riscv_capabilities = '@riscv_CAPABILITIES@'
config.riscv_hal_name = '@RISCV_HAL_NAME@'
config.riscv_device_name = '@RISCV_DEVICE_NAME@'
config.riscv_isa_description = '@RISCV_ISA_DESCRIPTION@'
config.ca_enable = set(filter(None, (
    # riscv on Windows isn't double-conformant, so doubles are disabled by default
    if_enabled('@CA_RISCV_ENABLE_FP64@', 'fp64'),
    if_enabled('@CA_ENABLE_RISCV_IMAGE_SUPPORT@', 'images'),
    # Device specific build options are only reported with debug support
    if_enabled('@CA_ENABLE_DEBUG_SUPPORT@', 'debug'),
)))

# Now load the in-tree lit config
lit_cfg_path = os.path.join('@CMAKE_CURRENT_SOURCE_DIR@', 'lit.cfg')
if not os.path.exists(lit_cfg_path):
    lit_cfg_path = os.path.join(os.path.dirname(__file__), 'lit.cfg')

lit_config.load_config(config, lit_cfg_path)
