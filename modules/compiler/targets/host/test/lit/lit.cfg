# Copyright (C) Codeplay Software Limited
#
# Licensed under the Apache License, Version 2.0 (the "License") with LLVM
# Exceptions; you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
"""Python configuration file for lit."""
import lit.formats
import lit.util
from platform import system

# Name of the test suite.
config.name = 'Codeplay'

# File extensions for testing.
config.suffixes = ['.ll']

# The test format used to interpret tests.
config.test_format = lit.formats.ShTest(execute_external=False)

# The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# We might be running from an installed build dir
if not os.path.exists(config.test_exec_root):
    config.test_exec_root = config.test_source_root

if "aarch64" in config.available_features:
    system_device = "AArch64"
elif "arm32" in config.available_features:
    system_device = "Arm"
elif "x86_64" in config.available_features:
    if config.ca_host_bits == 32:
        system_device = "x86"
    else:
        system_device = "x86_64"
elif "x86" in config.available_features:
    system_device = "x86"
else:
    lit_config.fatal("Unable to find system device based off %s" %
                     config.system_processor)

config.substitutions.append(
    ('%system_device', f'ComputeAorta {system_device}'))

if config.compiler_cross_aarch64:
    config.available_features.add("cross_aarch64")
if config.compiler_cross_x86_64:
    config.available_features.add("cross_x86_64")
if config.compiler_cross_x86:
    config.available_features.add("cross_x86")
if config.compiler_cross_arm:
    config.available_features.add("cross_arm")

codegen_arm32 = (system_device == "Arm") or ("cross_arm"
                                             in config.available_features)
codegen_arm64 = (system_device == "AArch64") or ("cross_aarch64"
                                                 in config.available_features)
codegen_x86 = (system_device == "x86") or ("cross_x86"
                                           in config.available_features)
codegen_x86_64 = (system_device == "x86_64") or ("cross_x86_64"
                                                in config.available_features)

if codegen_arm32:
    config.available_features.add("codegen_arm32")
if codegen_arm64:
    config.available_features.add("codegen_aarch64")
if codegen_x86:
    config.available_features.add("codegen_x86")
if codegen_x86_64:
    config.available_features.add("codegen_x86_64")
if codegen_x86 or codegen_x86_64:
    config.available_features.add("codegen_x86_any")
if codegen_arm32 or codegen_arm64:
    config.available_features.add("codegen_arm_any")

# Only to be used with REQUIRES: arm_any or x86_any
device_default_arm = "AArch64" if codegen_arm64 else "Arm"
device_default_x86 = "x86_64" if codegen_x86_64 else "x86"

device_extension = " Windows" if 'Windows' == system() else ""

config.substitutions.append(
    ('%x86_any_device', f'ComputeAorta {device_default_x86}{device_extension}'))
config.substitutions.append(
    ('%arm32_device', f'ComputeAorta Arm{device_extension}'))
config.substitutions.append(
    ('%aarch64_device', f'ComputeAorta AArch64{device_extension}'))    
config.substitutions.append(
    ('%x86_device', f'ComputeAorta x86{device_extension}'))
config.substitutions.append(
    ('%x86_64_device', f'ComputeAorta x86_64{device_extension}'))

config.substitutions.append(
    ('%default_device', 'ComputeAorta {}'.format(device_default_x86 if (
        codegen_x86 or codegen_x86_64) else device_default_arm)))
