// Copyright (C) Codeplay Software Limited. All Rights Reserved.

// RUN: %pp-llvm-ver -o %t.pp < %s --llvm-ver %LLVMVER
// RUN: %spirv-ll -a Vulkan %p/op_glsl_UnpackSnorm4x8_uint.spv -o %t
// RUN: %filecheck < %t %t.pp

// CHECK: ; ModuleID = '{{.*}}'
#version 450

layout (std430, set=0, binding=0) buffer inA {
  uint arg0;
};

layout (std430, set=0, binding=1) buffer outR {
  vec4 res;
};

void main() {
// CHECK-GE15: define spir_kernel void @main(ptr addrspace(1){{( %0)?}}, ptr addrspace(1){{( %1)?}}, ptr addrspace(1){{( %2)?}}) {
// CHECK-LT15: define spir_kernel void @main([[inA:%[a-zA-Z0-9]+]] addrspace(1)*{{( %0)?}}, [[outR:%[a-zA-Z0-9]+]] addrspace(1)*{{( %1)?}}, i32 addrspace(1)*{{( %2)?}}) {
// CHECK-GE15:   [[arg0:%[a-zA-Z0-9]+]] = getelementptr [[inA:%.*]], ptr addrspace(1) {{%[a-zA-Z0-9]+}}, i32 0, i32 0
// CHECK-LT15:   [[arg0:%[a-zA-Z0-9]+]] = getelementptr [[inA]], [[inA]] addrspace(1)* {{%[a-zA-Z0-9]+}}, i32 0, i32 0
// CHECK-GE15:   [[arg0value:%[a-zA-Z0-9]+]] = load i32, ptr addrspace(1) [[arg0]]
// CHECK-LT15:   [[arg0value:%[a-zA-Z0-9]+]] = load i32, i32 addrspace(1)* [[arg0]]
  res = unpackSnorm4x8(arg0);
// CHECK:   [[call:%[a-zA-Z0-9]+]] = call spir_func <4 x float> @_Z14unpackSnorm4x8j(i32 [[arg0value]])
// CHECK-GE15:   [[res:%[a-zA-Z0-9]+]] = getelementptr [[outR:%.*]], ptr addrspace(1) {{%[a-zA-Z0-9]+}}, i32 0, i32 0
// CHECK-LT15:   [[res:%[a-zA-Z0-9]+]] = getelementptr [[outR]], [[outR]] addrspace(1)* {{%[a-zA-Z0-9]+}}, i32 0, i32 0
// CHECK-GE15:   store <4 x float> [[call]], ptr addrspace(1) [[res]]
// CHECK-LT15:   store <4 x float> [[call]], <4 x float> addrspace(1)* [[res]]
// CHECK:   ret void
}
// CHECK: }
