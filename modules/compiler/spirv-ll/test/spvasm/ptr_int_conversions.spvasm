; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: spirv-ll-tool -a Vulkan -c Addresses -c Float64 -c Int64 %spv_file_s | FileCheck %s
            OpCapability Shader
            OpCapability Addresses
            OpCapability Float64
            OpCapability Int64
       %1 = OpExtInstImport "GLSL.std.450"
            OpMemoryModel Logical GLSL450
            OpEntryPoint GLCompute %main "main"
            OpExecutionMode %main LocalSize 1 1 1
            OpSource GLSL 450
            OpName %main "main"
            OpName %ptr "ptr"
               OpName %a "a"
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
       %uint = OpTypeInt 32 0
          %7 = OpConstant %uint 2
%_arr_uint_7 = OpTypeArray %uint %7
%_ptr_Function__arr_uint_7 = OpTypePointer Function %_arr_uint_7
         %11 = OpConstant %uint 42
         %12 = OpConstantComposite %_arr_uint_7 %11 %11
%_ptr_Function_uint = OpTypePointer Function %uint
         %16 = OpConstant %uint 1
       %main = OpFunction %void None %3
          %5 = OpLabel
        %ptr = OpVariable %_ptr_Function__arr_uint_7 Function
          %a = OpVariable %_ptr_Function_uint Function
               OpStore %ptr %12
         %17 = OpConvertPtrToU %uint %ptr ; pointer to uint
         %18 = OpIAdd %uint %16 %17 ; increment
         %19 = OpConvertUToPtr %_ptr_Function_uint %18 ; convert back again
         %20 = OpLoad %uint %19
               OpStore %a %20
               OpReturn
               OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: define spir_kernel void @main()
; CHECK: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = alloca [2 x i32]
; CHECK: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = alloca i32
; CHECK: store [2 x i32] [i32 42, i32 42], ptr {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = ptrtoint ptr {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} to i32
; CHECK: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = add i32 1, {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = inttoptr i32 {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} to ptr
; CHECK: {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}} = load i32, ptr {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
; CHECK: store i32 {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}, ptr {{[%@][-a-zA-Z$._0-9][-a-zA-Z$._0-9]*}}
