; Copyright (C) Codeplay Software Limited. All Rights Reserved.

; RUN: %pp-llvm-ver -o %t.pp < %s --llvm-ver %LLVMVER
; RUN: %spirv-ll -a Vulkan -c Float64 -c Int64 %p/op_copy_memory_vector.spv -o %t
; RUN: %filecheck < %t %t.pp
; CHECK: ; ModuleID = '{{.*}}'
               OpCapability Shader
               OpCapability Float64
               OpCapability Int64
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main"
               OpExecutionMode %main LocalSize 1 1 1
               OpSource GLSL 450
               OpName %main "main"
               OpName %a "a"
               OpName %b "b"
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
      %float = OpTypeFloat 32
       %vec4 = OpTypeVector %float 4
   %ptr_vec4 = OpTypePointer Function %vec4
         %14 = OpConstant %float 42.42
%vecConstant = OpConstantComposite %vec4 %14 %14 %14 %14
       %main = OpFunction %void None %3
; CHECK: define spir_kernel void @main()
          %5 = OpLabel
          %a = OpVariable %ptr_vec4 Function
; CHECK: %a = alloca <4 x float>
          %b = OpVariable %ptr_vec4 Function
; CHECK: %b = alloca <4 x float>
               OpStore %a %vecConstant
; CHECK: store <4 x float>
; CHECK-LT15: [[b:%[a-zA-Z0-9]+]] = bitcast <4 x float>* %b to i8*
; CHECK-LT15: [[a:%[a-zA-Z0-9]+]] = bitcast <4 x float>* %a to i8*
               OpCopyMemory %b %a
; The alignment argument is no longer emitted in LLVM 7, so it's optional {{   below  }}
; The bitcasted alloca arguments are required strong alignment in LLVM 11, so included optional alignment string
; CHECK-GE15: call void @llvm.memcpy.p0.p0.i64(ptr{{( align [0-9])?}} %b, ptr{{( align [0-9])?}} %a, i64 16{{(, i32 0)?}}, i1 false)
; CHECK-LT15: call void @llvm.memcpy.p0i8.p0i8.i64(i8*{{( align [0-9])?}} [[b]], i8*{{( align [0-9])?}} [[a]], i64 16{{(, i32 0)?}}, i1 false)
               OpReturn
; CHECK: ret void
               OpFunctionEnd
; CHECK: }
