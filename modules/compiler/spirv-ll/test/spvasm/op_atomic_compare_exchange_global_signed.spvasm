; Copyright (C) Codeplay Software Limited. All Rights Reserved.

; RUN: %spirv-ll -a Vulkan %p/op_atomic_compare_exchange_global_signed.spv | %filecheck %s
            OpCapability Shader
       %1 = OpExtInstImport "GLSL.std.450"
            OpMemoryModel Logical GLSL450
            OpEntryPoint GLCompute %atomic "atomic"
            OpExecutionMode %atomic LocalSize 1 1 1
            OpName %atomic "atomic"
            OpName %a "a"
            OpDecorate %block_t Block
            OpDecorate %block_var DescriptorSet 0
            OpDecorate %block_var Binding 0
    %void = OpTypeVoid
    %uint = OpTypeInt 32 0
     %int = OpTypeInt 32 1
 %block_t = OpTypeStruct %int
%ptr_Uniform_block_t = OpTypePointer Uniform %block_t
%ptr_Uniform_int = OpTypePointer Uniform %int
       %3 = OpTypeFunction %void
       %9 = OpConstant %int 424
  %uint_1 = OpConstant %uint 1
  %uint_0 = OpConstant %uint 0
%block_var = OpVariable %ptr_Uniform_block_t Uniform
  %atomic = OpFunction %void None %3
       %5 = OpLabel
       %a = OpAccessChain %ptr_Uniform_int %block_var %uint_0
%original = OpAtomicCompareExchange %int %a %uint_1 %uint_0 %uint_0 %9 %uint_0
            OpReturn
            OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: define spir_kernel void @atomic(ptr addrspace(1){{( %0)?}}, ptr addrspace(1){{( %1)?}})
; CHECK: [[PTR:%[a-zA-Z0-9_]+]] = getelementptr [[BLOCK:%.*]], ptr addrspace(1) [[BLOCK]], i32 0, i32 0
; CHECK: {{%[a-zA-Z0-9_]+}} = call spir_func i32 @_Z14atomic_cmpxchgPU3AS1Viji(ptr addrspace(1) [[PTR]], i32 0, i32 424)
; CHECK: ret void
; CHECK: declare spir_func i32 @_Z14atomic_cmpxchgPU3AS1Viji(ptr addrspace(1), i32, i32)
