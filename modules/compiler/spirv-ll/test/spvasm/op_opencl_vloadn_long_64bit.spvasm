; Copyright (C) Codeplay Software Limited. All Rights Reserved.

; RUN: %spirv-ll -a OpenCL -b 64 -c Addresses %p/op_opencl_vloadn_long_64bit.spv | %filecheck %s
               OpCapability Addresses
               OpCapability Kernel
               OpCapability Vector16
               OpCapability Int64
          %1 = OpExtInstImport "OpenCL.std"
               OpMemoryModel Physical64 OpenCL
               OpEntryPoint Kernel %7 "foo"
               OpSource OpenCL_C 102000
               OpName %in "in"
               OpName %loc "loc"
               OpName %entry "entry"
               OpName %call "call"
               OpName %call1 "call1"
               OpName %call2 "call2"
               OpName %call3 "call3"
               OpName %call4 "call4"
               OpName %call5 "call5"
               OpName %call6 "call6"
               OpName %call7 "call7"
               OpName %call8 "call8"
               OpName %call9 "call9"
      %ulong = OpTypeInt 64 0
    %ulong_0 = OpConstant %ulong 0
       %void = OpTypeVoid
%_ptr_CrossWorkgroup_ulong = OpTypePointer CrossWorkgroup %ulong
%_ptr_Workgroup_ulong = OpTypePointer Workgroup %ulong
          %6 = OpTypeFunction %void %_ptr_CrossWorkgroup_ulong %_ptr_Workgroup_ulong
    %v2ulong = OpTypeVector %ulong 2
    %v3ulong = OpTypeVector %ulong 3
    %v4ulong = OpTypeVector %ulong 4
    %v8ulong = OpTypeVector %ulong 8
   %v16ulong = OpTypeVector %ulong 16
          %7 = OpFunction %void None %6
         %in = OpFunctionParameter %_ptr_CrossWorkgroup_ulong
        %loc = OpFunctionParameter %_ptr_Workgroup_ulong
      %entry = OpLabel
       %call = OpExtInst %v2ulong %1 vloadn %ulong_0 %in 2
; CHECK: {{%[a-zA-Z0-9]+}} = call spir_func <2 x i64> @_Z6vload2mPU3AS1Km(i64 0, ptr addrspace(1) %in)
      %call1 = OpExtInst %v3ulong %1 vloadn %ulong_0 %in 3
; CHECK: {{%[a-zA-Z0-9]+}} = call spir_func <3 x i64> @_Z6vload3mPU3AS1Km(i64 0, ptr addrspace(1) %in)
      %call2 = OpExtInst %v4ulong %1 vloadn %ulong_0 %in 4
; CHECK: {{%[a-zA-Z0-9]+}} = call spir_func <4 x i64> @_Z6vload4mPU3AS1Km(i64 0, ptr addrspace(1) %in)
      %call3 = OpExtInst %v8ulong %1 vloadn %ulong_0 %in 8
; CHECK: {{%[a-zA-Z0-9]+}} = call spir_func <8 x i64> @_Z6vload8mPU3AS1Km(i64 0, ptr addrspace(1) %in)
      %call4 = OpExtInst %v16ulong %1 vloadn %ulong_0 %in 16
; CHECK: {{%[a-zA-Z0-9]+}} = call spir_func <16 x i64> @_Z7vload16mPU3AS1Km(i64 0, ptr addrspace(1) %in)
      %call5 = OpExtInst %v2ulong %1 vloadn %ulong_0 %loc 2
; CHECK: {{%[a-zA-Z0-9]+}} = call spir_func <2 x i64> @_Z6vload2mPU3AS3Km(i64 0, ptr addrspace(3) %loc)
      %call6 = OpExtInst %v3ulong %1 vloadn %ulong_0 %loc 3
; CHECK: {{%[a-zA-Z0-9]+}} = call spir_func <3 x i64> @_Z6vload3mPU3AS3Km(i64 0, ptr addrspace(3) %loc)
      %call7 = OpExtInst %v4ulong %1 vloadn %ulong_0 %loc 4
; CHECK: {{%[a-zA-Z0-9]+}} = call spir_func <4 x i64> @_Z6vload4mPU3AS3Km(i64 0, ptr addrspace(3) %loc)
      %call8 = OpExtInst %v8ulong %1 vloadn %ulong_0 %loc 8
; CHECK: {{%[a-zA-Z0-9]+}} = call spir_func <8 x i64> @_Z6vload8mPU3AS3Km(i64 0, ptr addrspace(3) %loc)
      %call9 = OpExtInst %v16ulong %1 vloadn %ulong_0 %loc 16
; CHECK: {{%[a-zA-Z0-9]+}} = call spir_func <16 x i64> @_Z7vload16mPU3AS3Km(i64 0, ptr addrspace(3) %loc)
               OpReturn
               OpFunctionEnd
