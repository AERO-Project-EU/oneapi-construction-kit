/// @brief Calculate a refraction.
/// @param[in] i   A abacus_@generate_type@.
/// @param[in] n   A abacus_@generate_type@.
/// @param[in] eta A abacus_@scalar_type@.
/// @return        A abacus_@generate_type@.
///
/// Refract first calculates k such that k = 1 - eta^2 * (1 - dot(n, i)^2), and
/// then returns 0 if (k < 0), otherwise returns eta * i - (eta * dot(n, i) +
/// sqrt(k)) * n.
abacus_@generate_type@ ABACUS_EXPORT_API __abacus_refract(abacus_@generate_type@ i, abacus_@generate_type@ n, abacus_@scalar_type@ eta);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_refract.
/// @param[in] i   A abacus_@generate_type@.
/// @param[in] n   A abacus_@generate_type@.
/// @param[in] eta A abacus_@scalar_type@.
/// @return        A abacus_@generate_type@.
inline abacus_@generate_type@ ABACUS_API refract(abacus_@generate_type@ i, abacus_@generate_type@ n, abacus_@scalar_type@ eta) {
  return __abacus_refract(i, n, eta);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif
