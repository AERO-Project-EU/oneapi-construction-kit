// Copyright (C) Codeplay Software Limited. All Rights Reserved.
// @generate_autogen@

/// @file
///
/// Abacus extra builtins.
///
/// @copyright Copyright (C) Codeplay Software Limited. All Rights Reserved.

#ifndef __ABACUS_ABACUS_EXTRA__
#define __ABACUS_ABACUS_EXTRA__

#ifndef __ABACUS_ABACUS_CONFIG__
#include <abacus/abacus_config.h>
#endif

////////////////////////////////////////////////////////////////////////////////
/// @defgroup abacus_extra abacus_extra
/// @{

@generate_input_definitions@

/// @brief Normalize and pack a float vector.
/// @param[in] x A abacus_float4.
/// @return      A abacus_uint.
///
/// Returns convert_char4(clamp(x,-1,+1) * 127).
abacus_uint ABACUS_EXPORT_API __abacus_pack_snorm4x8(abacus_float4 x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_pack_normalize_char4.
/// @param[in] x A abacus_float4.
/// @return      A abacus_uint.
inline abacus_uint ABACUS_API packSnorm4x8(abacus_float4 x) {
  return __abacus_pack_snorm4x8(x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Normalize and pack a float vector.
/// @param[in] x A abacus_float4.
/// @return      A abacus_uint.
///
/// Returns convert_uchar4(clamp(x,0,+1) * 255).
abacus_uint ABACUS_EXPORT_API __abacus_pack_unorm4x8(abacus_float4 x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_pack_normalize_uchar4.
/// @param[in] x A abacus_float4.
/// @return      A abacus_uint.
inline abacus_uint ABACUS_API packUnorm4x8(abacus_float4 x) {
  return __abacus_pack_unorm4x8(x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Normalize and pack a float vector.
/// @param[in] x A abacus_float2.
/// @return      A abacus_uint.
///
/// Returns convert_short2(clamp(x,-1,+1) * 32767).
abacus_uint ABACUS_EXPORT_API __abacus_pack_snorm2x16(abacus_float2 x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_pack_normalize_short2.
/// @param[in] x A abacus_float2.
/// @return      A abacus_uint.
inline abacus_uint ABACUS_API packSnorm2x16(abacus_float2 x) {
  return __abacus_pack_snorm2x16(x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Normalize and pack a float vector.
/// @param[in] x A abacus_float2.
/// @return      A abacus_uint.
///
/// Returns convert_ushort2(clamp(x, 0,+1) * 65535).
abacus_uint ABACUS_EXPORT_API __abacus_pack_unorm2x16(abacus_float2 x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_pack_normalize_ushort2.
/// @param[in] x A abacus_float2.
/// @return      A abacus_uint.
inline abacus_uint ABACUS_API packUnorm2x16(abacus_float2 x) {
  return __abacus_pack_unorm2x16(x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Pack a float vector.
/// @param[in] x A abacus_float2.
/// @return      A abacus_uint.
///
/// Returns as_short2(convert_half2(x)).
abacus_uint ABACUS_EXPORT_API __abacus_pack_half2x16(abacus_float2 x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_pack_half2.
/// @param[in] x A abacus_float2.
/// @return      A abacus_uint.
inline abacus_uint ABACUS_API packHalf2x16(abacus_float2 x) {
  return __abacus_pack_half2x16(x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Normalize and unpack a float vector.
/// @param[in] x A abacus_uint.
/// @return      A abacus_float4.
///
/// Returns clamp(convert_float4(x) / 127,-1,+1).
abacus_float4 ABACUS_EXPORT_API __abacus_unpack_snorm4x8(abacus_uint x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_unpack_normalize.
/// @param[in] x A abacus_uint.
/// @return      A abacus_float4.
inline abacus_float4 ABACUS_API unpackSnorm4x8(abacus_uint x) {
  return __abacus_unpack_snorm4x8(x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Normalize and unpack a float vector.
/// @param[in] x A abacus_uint.
/// @return      A abacus_float4.
///
/// Returns convert_float4(x) / 255.
abacus_float4 ABACUS_EXPORT_API __abacus_unpack_unorm4x8(abacus_uint x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_unpack_normalize.
/// @param[in] x A abacus_uint.
/// @return      A abacus_float4.
inline abacus_float4 ABACUS_API unpackUnorm4x8(abacus_uint x) {
  return __abacus_unpack_unorm4x8(x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Normalize and unpack a float vector.
/// @param[in] x A abacus_uint.
/// @return      A abacus_float2.
///
/// Returns clamp(convert_float2(x) / 32767,-1,+1).
abacus_float2 ABACUS_EXPORT_API __abacus_unpack_snorm2x16(abacus_uint x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_unpack_normalize.
/// @param[in] x A abacus_uint.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API unpackSnorm2x16(abacus_uint x) {
  return __abacus_unpack_snorm2x16(x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Normalize and unpack a float vector.
/// @param[in] x A abacus_uint.
/// @return      A abacus_float2.
///
/// Returns convert_float2(x) / 65535.
abacus_float2 ABACUS_EXPORT_API __abacus_unpack_unorm2x16(abacus_uint x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_unpack_normalize.
/// @param[in] x A abacus_uint.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API unpackUnorm2x16(abacus_uint x) {
  return __abacus_unpack_unorm2x16(x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Unpack a float vector.
/// @param[in] x A abacus_uint.
/// @return      A abacus_float2.
///
/// Returns as_short2(convert_half2(x)).
abacus_float2 ABACUS_EXPORT_API __abacus_unpack_half2x16(abacus_uint x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_unpack_half2.
/// @param[in] x A abacus_uint.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API unpackHalf2x16(abacus_uint x) {
  return __abacus_unpack_half2x16(x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @}
////////////////////////////////////////////////////////////////////////////////

#endif  //__ABACUS_ABACUS_EXTRA__
