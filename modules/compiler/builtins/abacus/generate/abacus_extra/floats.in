/// @brief Face n forward.
/// @param[in] n    A abacus_@generate_type@.
/// @param[in] i    A abacus_@generate_type@.
/// @param[in] nref A abacus_@generate_type@.
/// @return         A abacus_@generate_type@.
///
/// face_forward calculates the dot product of nref and i, and returns
/// dot(nref, i) < 0 ? n : -n.
abacus_@generate_type@ ABACUS_EXPORT_API __abacus_face_forward(abacus_@generate_type@ n, abacus_@generate_type@ i, abacus_@generate_type@ nref);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_face_forward.
/// @param[in] n    A abacus_@generate_type@.
/// @param[in] i    A abacus_@generate_type@.
/// @param[in] nref A abacus_@generate_type@.
/// @return         A abacus_@generate_type@.
inline abacus_@generate_type@ ABACUS_API faceforward(abacus_@generate_type@ n, abacus_@generate_type@ i, abacus_@generate_type@ nref) {
  return __abacus_face_forward(n, i, nref);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Calculate a reflection.
/// @param[in] i    A abacus_@generate_type@.
/// @param[in] n    A abacus_@generate_type@.
/// @return         A abacus_@generate_type@.
///
/// reflect returns i - 2 * dot(n, i) * n, where i is the incident vector, and n
/// is the surface orientation.
abacus_@generate_type@ ABACUS_EXPORT_API __abacus_reflect(abacus_@generate_type@ i, abacus_@generate_type@ n);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_reflect.
/// @param[in] i    A abacus_@generate_type@.
/// @param[in] n    A abacus_@generate_type@.
/// @return         A abacus_@generate_type@.
inline abacus_@generate_type@ ABACUS_API reflect(abacus_@generate_type@ i, abacus_@generate_type@ n) {
  return __abacus_reflect(i, n);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif
