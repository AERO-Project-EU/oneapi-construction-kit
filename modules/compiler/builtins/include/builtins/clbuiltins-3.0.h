// Copyright (C) Codeplay Software Limited. All Rights Reserved.
//
// WARNING: This file is generated by a script, do not edit it directly. Instead
// changes should be made to the generate_header_30.sh script in
// builtins/scripts.

#ifndef OCL_CLBUILTINS_30_H_INCLUDED
#define OCL_CLBUILTINS_30_H_INCLUDED

#include "builtins.h"
#define ABACUS_ENABLE_OPENCL_3_0_BUILTINS
#include <abacus/abacus_integer.h>
#undef ABACUS_ENABLE_OPENCL_3_0_BUILTINS

extern size_t __attribute__((pure)) __mux_get_local_linear_id(void);
extern size_t __attribute__((pure)) __mux_get_global_linear_id(void);
extern size_t __attribute__((pure)) __mux_get_enqueued_local_size(uint x);
extern uint __attribute__((pure)) __mux_get_sub_group_id(void);
extern uint __attribute__((pure)) __mux_get_num_sub_groups(void);
extern uint __attribute__((pure)) __mux_get_max_sub_group_size(void);

size_t __CL_WORK_ITEM_ATTRIBUTES get_local_linear_id(void) {
  return __mux_get_local_linear_id();
}

size_t __CL_WORK_ITEM_ATTRIBUTES get_global_linear_id(void) {
  return __mux_get_global_linear_id();
}

size_t __CL_WORK_ITEM_ATTRIBUTES get_enqueued_local_size(uint x) {
  return __mux_get_enqueued_local_size(x);
}

// Naive implementation of the sub-group builtins for the case that sub-group
// size is 1.
uint __CL_WORK_ITEM_ATTRIBUTES get_sub_group_size(void) { return 1; }

uint __CL_WORK_ITEM_ATTRIBUTES get_max_sub_group_size(void) {
  return __mux_get_max_sub_group_size();
}

uint __CL_WORK_ITEM_ATTRIBUTES get_num_sub_groups(void) {
  return __mux_get_num_sub_groups();
}

uint __CL_WORK_ITEM_ATTRIBUTES get_enqueued_num_sub_groups(void) {
  return get_num_sub_groups();
}

uint __CL_WORK_ITEM_ATTRIBUTES get_sub_group_id(void) {
  return __mux_get_sub_group_id();
}

uint __CL_WORK_ITEM_ATTRIBUTES get_sub_group_local_id(void) { return 0; }

int __CL_BUILTIN_ATTRIBUTES sub_group_all(int predicate) { return predicate; }

int __CL_BUILTIN_ATTRIBUTES sub_group_any(int predicate) { return predicate; }

int __CL_BUILTIN_ATTRIBUTES sub_group_broadcast(int x,
                                                uint sub_group_local_id) {
  (void)sub_group_local_id;
  return x;
}

int __CL_BUILTIN_ATTRIBUTES sub_group_reduce_add(int x) { return x; }

int __CL_BUILTIN_ATTRIBUTES sub_group_reduce_min(int x) { return x; }

int __CL_BUILTIN_ATTRIBUTES sub_group_reduce_max(int x) { return x; }

int __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_add(int x) { return 0; }

int __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_min(int x) {
  return INT_MAX;
}

int __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_max(int x) {
  return INT_MIN;
}

int __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_add(int x) { return x; }

int __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_min(int x) { return x; }

int __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_max(int x) { return x; }

// SPV_KHR_uniform_group_arithmetic

int __CL_BUILTIN_ATTRIBUTES sub_group_reduce_mul(int x) { return x; }
int __CL_BUILTIN_ATTRIBUTES sub_group_reduce_and(int x) { return x; }
int __CL_BUILTIN_ATTRIBUTES sub_group_reduce_or(int x) { return x; }
int __CL_BUILTIN_ATTRIBUTES sub_group_reduce_xor(int x) { return x; }

int __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_mul(int x) { return 1; }
int __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_and(int x) { return ~0; }
int __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_or(int x) { return 0; }
int __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_xor(int x) { return 0; }

int __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_mul(int x) { return x; }
int __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_and(int x) { return x; }
int __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_or(int x) { return x; }
int __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_xor(int x) { return x; }

uint __CL_BUILTIN_ATTRIBUTES sub_group_broadcast(uint x,
                                                 uint sub_group_local_id) {
  (void)sub_group_local_id;
  return x;
}

uint __CL_BUILTIN_ATTRIBUTES sub_group_reduce_add(uint x) { return x; }

uint __CL_BUILTIN_ATTRIBUTES sub_group_reduce_min(uint x) { return x; }

uint __CL_BUILTIN_ATTRIBUTES sub_group_reduce_max(uint x) { return x; }

uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_add(uint x) { return 0; }

uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_min(uint x) {
  return UINT_MAX;
}

uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_max(uint x) { return 0; }

uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_add(uint x) { return x; }

uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_min(uint x) { return x; }

uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_max(uint x) { return x; }

// SPV_KHR_uniform_group_arithmetic

uint __CL_BUILTIN_ATTRIBUTES sub_group_reduce_mul(uint x) { return x; }
uint __CL_BUILTIN_ATTRIBUTES sub_group_reduce_and(uint x) { return x; }
uint __CL_BUILTIN_ATTRIBUTES sub_group_reduce_or(uint x) { return x; }
uint __CL_BUILTIN_ATTRIBUTES sub_group_reduce_xor(uint x) { return x; }

uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_mul(uint x) { return 1; }
uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_and(uint x) { return ~0; }
uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_or(uint x) { return 0; }
uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_xor(uint x) { return 0; }

uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_mul(uint x) { return x; }
uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_and(uint x) { return x; }
uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_or(uint x) { return x; }
uint __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_xor(uint x) { return x; }

long __CL_BUILTIN_ATTRIBUTES sub_group_broadcast(long x,
                                                 uint sub_group_local_id) {
  (void)sub_group_local_id;
  return x;
}

long __CL_BUILTIN_ATTRIBUTES sub_group_reduce_add(long x) { return x; }

long __CL_BUILTIN_ATTRIBUTES sub_group_reduce_min(long x) { return x; }

long __CL_BUILTIN_ATTRIBUTES sub_group_reduce_max(long x) { return x; }

long __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_add(long x) { return 0; }

long __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_min(long x) {
  return LONG_MAX;
}

long __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_max(long x) {
  return LONG_MIN;
}

long __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_add(long x) { return x; }

long __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_min(long x) { return x; }

long __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_max(long x) { return x; }

// SPV_KHR_uniform_group_arithmetic

long __CL_BUILTIN_ATTRIBUTES sub_group_reduce_mul(long x) { return x; }
long __CL_BUILTIN_ATTRIBUTES sub_group_reduce_and(long x) { return x; }
long __CL_BUILTIN_ATTRIBUTES sub_group_reduce_or(long x) { return x; }
long __CL_BUILTIN_ATTRIBUTES sub_group_reduce_xor(long x) { return x; }

long __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_mul(long x) { return 1; }
long __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_and(long x) { return ~0; }
long __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_or(long x) { return 0; }
long __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_xor(long x) { return 0; }

long __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_mul(long x) { return x; }
long __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_and(long x) { return x; }
long __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_or(long x) { return x; }
long __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_xor(long x) { return x; }

ulong __CL_BUILTIN_ATTRIBUTES sub_group_broadcast(ulong x,
                                                  uint sub_group_local_id) {
  (void)sub_group_local_id;
  return x;
}

ulong __CL_BUILTIN_ATTRIBUTES sub_group_reduce_add(ulong x) { return x; }

ulong __CL_BUILTIN_ATTRIBUTES sub_group_reduce_min(ulong x) { return x; }

ulong __CL_BUILTIN_ATTRIBUTES sub_group_reduce_max(ulong x) { return x; }

ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_add(ulong x) {
  return 0;
}

ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_min(ulong x) {
  return ULONG_MAX;
}

ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_max(ulong x) {
  return 0;
}

ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_add(ulong x) {
  return x;
}

ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_min(ulong x) {
  return x;
}

ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_max(ulong x) {
  return x;
}

// SPV_KHR_uniform_group_arithmetic

ulong __CL_BUILTIN_ATTRIBUTES sub_group_reduce_mul(ulong x) { return x; }
ulong __CL_BUILTIN_ATTRIBUTES sub_group_reduce_and(ulong x) { return x; }
ulong __CL_BUILTIN_ATTRIBUTES sub_group_reduce_or(ulong x) { return x; }
ulong __CL_BUILTIN_ATTRIBUTES sub_group_reduce_xor(ulong x) { return x; }

ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_mul(ulong x) {
  return 1;
}
ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_and(ulong x) {
  return ~0;
}
ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_or(ulong x) { return 0; }
ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_xor(ulong x) {
  return 0;
}

ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_mul(ulong x) {
  return x;
}
ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_and(ulong x) {
  return x;
}
ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_or(ulong x) { return x; }
ulong __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_xor(ulong x) {
  return x;
}

#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_BUILTIN_ATTRIBUTES sub_group_broadcast(half x,
                                                 uint sub_group_local_id) {
  (void)sub_group_local_id;
  return x;
}

half __CL_BUILTIN_ATTRIBUTES sub_group_reduce_add(half x) { return x; }

half __CL_BUILTIN_ATTRIBUTES sub_group_reduce_min(half x) { return x; }

half __CL_BUILTIN_ATTRIBUTES sub_group_reduce_max(half x) { return x; }

half __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_add(half x) {
  return 0.0;
}

half __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_min(half x) {
  return +INFINITY;
}

half __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_max(half x) {
  return -INFINITY;
}

half __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_add(half x) { return x; }

half __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_min(half x) { return x; }

half __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_max(half x) { return x; }

half __CL_BUILTIN_ATTRIBUTES sub_group_reduce_mul(half x) { return x; }
#endif  // __CA_BUILTINS_HALF_SUPPORT

float __CL_BUILTIN_ATTRIBUTES sub_group_broadcast(float x,
                                                  uint sub_group_local_id) {
  (void)sub_group_local_id;
  return x;
}

float __CL_BUILTIN_ATTRIBUTES sub_group_reduce_add(float x) { return x; }

float __CL_BUILTIN_ATTRIBUTES sub_group_reduce_min(float x) { return x; }

float __CL_BUILTIN_ATTRIBUTES sub_group_reduce_max(float x) { return x; }

float __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_add(float x) {
  return 0.0;
}

float __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_min(float x) {
  return +INFINITY;
}

float __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_max(float x) {
  return -INFINITY;
}

float __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_add(float x) {
  return x;
}

float __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_min(float x) {
  return x;
}

float __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_max(float x) {
  return x;
}

// SPV_KHR_uniform_group_arithmetic

float __CL_BUILTIN_ATTRIBUTES sub_group_reduce_mul(float x) { return x; }

#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_BUILTIN_ATTRIBUTES sub_group_broadcast(double x,
                                                   uint sub_group_local_id) {
  (void)sub_group_local_id;
  return x;
}

double __CL_BUILTIN_ATTRIBUTES sub_group_reduce_add(double x) { return x; }

double __CL_BUILTIN_ATTRIBUTES sub_group_reduce_min(double x) { return x; }

double __CL_BUILTIN_ATTRIBUTES sub_group_reduce_max(double x) { return x; }

double __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_add(double x) {
  return 0.0;
}

double __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_min(double x) {
  return +INFINITY;
}

double __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_max(double x) {
  return -INFINITY;
}

double __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_add(double x) {
  return x;
}

double __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_min(double x) {
  return x;
}

double __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_max(double x) {
  return x;
}

// SPV_KHR_uniform_group_arithmetic

double __CL_BUILTIN_ATTRIBUTES sub_group_reduce_mul(double x) { return x; }

#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

bool __CL_BUILTIN_ATTRIBUTES sub_group_reduce_and(bool x) { return x; }
bool __CL_BUILTIN_ATTRIBUTES sub_group_reduce_or(bool x) { return x; }
bool __CL_BUILTIN_ATTRIBUTES sub_group_reduce_xor(bool x) { return x; }

bool __CL_BUILTIN_ATTRIBUTES sub_group_reduce_logical_and(bool x) { return x; }
bool __CL_BUILTIN_ATTRIBUTES sub_group_reduce_logical_or(bool x) { return x; }
bool __CL_BUILTIN_ATTRIBUTES sub_group_reduce_logical_xor(bool x) { return x; }

bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_mul(bool x) { return 1; }
bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_and(bool x) { return ~0; }
bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_or(bool x) { return 0; }
bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_xor(bool x) { return 0; }

bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_logical_and(bool x) {
  return ~0;
}
bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_logical_or(bool x) {
  return 0;
}
bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_exclusive_logical_xor(bool x) {
  return 0;
}

bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_mul(bool x) { return x; }
bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_and(bool x) { return x; }
bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_or(bool x) { return x; }
bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_xor(bool x) { return x; }

bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_logical_and(bool x) {
  return x;
}
bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_logical_or(bool x) {
  return x;
}
bool __CL_BUILTIN_ATTRIBUTES sub_group_scan_inclusive_logical_xor(bool x) {
  return x;
}

void __CL_BARRIER_ATTRIBUTES sub_group_barrier(cl_mem_fence_flags flags) {
  (void)flags;
}
void __CL_BARRIER_ATTRIBUTES sub_group_barrier(cl_mem_fence_flags flags,
                                               memory_scope scope) {
  (void)flags;
  (void)scope;
}

cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(bool *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const bool *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(char *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const char *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(char2 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const char2 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(char3 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const char3 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(char4 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const char4 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(char8 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const char8 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(char16 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const char16 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(short *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const short *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(short2 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const short2 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(short3 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const short3 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(short4 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const short4 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(short8 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const short8 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(short16 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const short16 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(int *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const int *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(int2 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const int2 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(int3 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const int3 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(int4 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const int4 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(int8 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const int8 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(int16 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const int16 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(long *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const long *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(long2 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const long2 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(long3 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const long3 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(long4 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const long4 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(long8 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const long8 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(long16 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const long16 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uchar *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uchar *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uchar2 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uchar2 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uchar3 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uchar3 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uchar4 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uchar4 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uchar8 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uchar8 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uchar16 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uchar16 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ushort *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ushort *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ushort2 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ushort2 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ushort3 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ushort3 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ushort4 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ushort4 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ushort8 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ushort8 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ushort16 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ushort16 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uint *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uint *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uint2 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uint2 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uint3 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uint3 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uint4 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uint4 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uint8 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uint8 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uint16 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uint16 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ulong *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ulong *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ulong2 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ulong2 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ulong3 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ulong3 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ulong4 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ulong4 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ulong8 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ulong8 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ulong16 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ulong16 *ptr) {
  return 0;
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(half *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const half *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(half2 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const half2 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(half3 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const half3 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(half4 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const half4 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(half8 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const half8 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(half16 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const half16 *ptr) {
  return 0;
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(float *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const float *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(float2 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const float2 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(float3 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const float3 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(float4 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const float4 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(float8 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const float8 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(float16 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const float16 *ptr) {
  return 0;
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(double *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const double *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(double2 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const double2 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(double3 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const double3 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(double4 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const double4 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(double8 *ptr) { return 0; }
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const double8 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(double16 *ptr) {
  return 0;
}
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const double16 *ptr) {
  return 0;
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

float __CL_BUILTIN_ATTRIBUTES vload_half(size_t offset, const half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const unaligned_type *p = (const unaligned_type *)(pointer + (offset * 1));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half_to_float(as_ushort(t));
  } else {
    return convert_float(t);
  }
#else
  return convert_half_to_float(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float2 __CL_BUILTIN_ATTRIBUTES vload_half2(size_t offset, const half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half2 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const unaligned_type *p = (const unaligned_type *)(pointer + (offset * 2));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half2_to_float2(as_ushort2(t));
  } else {
    return convert_float2(t);
  }
#else
  return convert_half2_to_float2(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float3 __CL_BUILTIN_ATTRIBUTES vload_half3(size_t offset, const half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half3 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const unaligned_type *p = (const unaligned_type *)(pointer + (offset * 3));
  unaligned_type t;
  t.x = p->x;
  t.y = p->y;
  t.z = p->z;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half3_to_float3(as_ushort3(t));
  } else {
    return convert_float3(t);
  }
#else
  return convert_half3_to_float3(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float4 __CL_BUILTIN_ATTRIBUTES vload_half4(size_t offset, const half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half4 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const unaligned_type *p = (const unaligned_type *)(pointer + (offset * 4));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half4_to_float4(as_ushort4(t));
  } else {
    return convert_float4(t);
  }
#else
  return convert_half4_to_float4(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float8 __CL_BUILTIN_ATTRIBUTES vload_half8(size_t offset, const half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half8 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const unaligned_type *p = (const unaligned_type *)(pointer + (offset * 8));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half8_to_float8(as_ushort8(t));
  } else {
    return convert_float8(t);
  }
#else
  return convert_half8_to_float8(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float16 __CL_BUILTIN_ATTRIBUTES vload_half16(size_t offset,
                                             const half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half16 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const unaligned_type *p = (const unaligned_type *)(pointer + (offset * 16));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half16_to_float16(as_ushort16(t));
  } else {
    return convert_float16(t);
  }
#else
  return convert_half16_to_float16(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float __CL_BUILTIN_ATTRIBUTES vloada_half(size_t offset, const half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const unaligned_type *p = (const unaligned_type *)(pointer + (offset * 1));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half_to_float(as_ushort(t));
  } else {
    return convert_float(t);
  }
#else
  return convert_half_to_float(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float2 __CL_BUILTIN_ATTRIBUTES vloada_half2(size_t offset,
                                            const half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const unaligned_type *p = (const unaligned_type *)(pointer + (offset * 2));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half2_to_float2(as_ushort2(t));
  } else {
    return convert_float2(t);
  }
#else
  return convert_half2_to_float2(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float3 __CL_BUILTIN_ATTRIBUTES vloada_half3(size_t offset,
                                            const half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const unaligned_type *p = (const unaligned_type *)(pointer + (offset * 4));
  unaligned_type t;
  t.x = p->x;
  t.y = p->y;
  t.z = p->z;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half3_to_float3(as_ushort3(t));
  } else {
    return convert_float3(t);
  }
#else
  return convert_half3_to_float3(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float4 __CL_BUILTIN_ATTRIBUTES vloada_half4(size_t offset,
                                            const half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const unaligned_type *p = (const unaligned_type *)(pointer + (offset * 4));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half4_to_float4(as_ushort4(t));
  } else {
    return convert_float4(t);
  }
#else
  return convert_half4_to_float4(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float8 __CL_BUILTIN_ATTRIBUTES vloada_half8(size_t offset,
                                            const half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const unaligned_type *p = (const unaligned_type *)(pointer + (offset * 8));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half8_to_float8(as_ushort8(t));
  } else {
    return convert_float8(t);
  }
#else
  return convert_half8_to_float8(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float16 __CL_BUILTIN_ATTRIBUTES vloada_half16(size_t offset,
                                              const half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const unaligned_type *p = (const unaligned_type *)(pointer + (offset * 16));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half16_to_float16(as_ushort16(t));
  } else {
    return convert_float16(t);
  }
#else
  return convert_half16_to_float16(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

void __CL_BUILTIN_ATTRIBUTES vstore_half(float data, size_t offset,
                                         half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(float data, size_t offset,
                                             half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(float data, size_t offset,
                                             half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(float data, size_t offset,
                                             half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(float data, size_t offset,
                                             half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2(float2 data, size_t offset,
                                          half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(float2 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(float2 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(float2 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(float2 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3(float3 data, size_t offset,
                                          half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(float3 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(float3 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(float3 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(float3 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4(float4 data, size_t offset,
                                          half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(float4 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(float4 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(float4 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(float4 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8(float8 data, size_t offset,
                                          half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(float8 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(float8 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(float8 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(float8 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16(float16 data, size_t offset,
                                           half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(float16 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(float16 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(float16 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(float16 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstore_half(double data, size_t offset,
                                         half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(double data, size_t offset,
                                             half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(double data, size_t offset,
                                             half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(double data, size_t offset,
                                             half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(double data, size_t offset,
                                             half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2(double2 data, size_t offset,
                                          half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(double2 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(double2 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(double2 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(double2 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3(double3 data, size_t offset,
                                          half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(double3 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(double3 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(double3 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(double3 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4(double4 data, size_t offset,
                                          half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(double4 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(double4 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(double4 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(double4 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8(double8 data, size_t offset,
                                          half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(double8 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(double8 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(double8 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(double8 data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16(double16 data, size_t offset,
                                           half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(double16 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(double16 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(double16 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(double16 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstorea_half(float data, size_t offset,
                                          half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(float data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(float data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(float data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(float data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2(float2 data, size_t offset,
                                           half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(float2 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(float2 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(float2 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(float2 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3(float3 data, size_t offset,
                                           half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(float3 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(float3 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(float3 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(float3 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4(float4 data, size_t offset,
                                           half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(float4 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(float4 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(float4 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(float4 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8(float8 data, size_t offset,
                                           half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(float8 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(float8 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(float8 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(float8 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16(float16 data, size_t offset,
                                            half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(float16 data, size_t offset,
                                                half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(float16 data, size_t offset,
                                                half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(float16 data, size_t offset,
                                                half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(float16 data, size_t offset,
                                                half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstorea_half(double data, size_t offset,
                                          half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(double data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(double data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(double data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(double data, size_t offset,
                                              half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2(double2 data, size_t offset,
                                           half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(double2 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(double2 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(double2 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(double2 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3(double3 data, size_t offset,
                                           half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(double3 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(double3 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(double3 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(double3 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4(double4 data, size_t offset,
                                           half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(double4 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(double4 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(double4 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(double4 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8(double8 data, size_t offset,
                                           half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(double8 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(double8 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(double8 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(double8 data, size_t offset,
                                               half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16(double16 data, size_t offset,
                                            half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(double16 data, size_t offset,
                                                half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(double16 data, size_t offset,
                                                half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(double16 data, size_t offset,
                                                half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(double16 data, size_t offset,
                                                half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  unaligned_type *p = (unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_BUILTIN_ATTRIBUTES fract(half x, half *y) {
  half p;
  half r = fract(x, &p);
  *y = p;
  return r;
}
half __CL_BUILTIN_ATTRIBUTES modf(half x, half *y) {
  half p;
  half r = modf(x, &p);
  *y = p;
  return r;
}
half __CL_BUILTIN_ATTRIBUTES sincos(half x, half *y) {
  half p;
  half r = sincos(x, &p);
  *y = p;
  return r;
}
half __CL_BUILTIN_ATTRIBUTES frexp(half x, int *y) {
  int p;
  half r = frexp(x, &p);
  *y = p;
  return r;
}
half __CL_BUILTIN_ATTRIBUTES lgamma_r(half x, int *y) {
  int p;
  half r = lgamma_r(x, &p);
  *y = p;
  return r;
}
half __CL_BUILTIN_ATTRIBUTES remquo(half x, half y, int *z) {
  int p;
  half r = remquo(x, y, &p);
  *z = p;
  return r;
}
half2 __CL_BUILTIN_ATTRIBUTES fract(half2 x, half2 *y) {
  half2 p;
  half2 r = fract(x, &p);
  *y = p;
  return r;
}
half2 __CL_BUILTIN_ATTRIBUTES modf(half2 x, half2 *y) {
  half2 p;
  half2 r = modf(x, &p);
  *y = p;
  return r;
}
half2 __CL_BUILTIN_ATTRIBUTES sincos(half2 x, half2 *y) {
  half2 p;
  half2 r = sincos(x, &p);
  *y = p;
  return r;
}
half2 __CL_BUILTIN_ATTRIBUTES frexp(half2 x, int2 *y) {
  int2 p;
  half2 r = frexp(x, &p);
  *y = p;
  return r;
}
half2 __CL_BUILTIN_ATTRIBUTES lgamma_r(half2 x, int2 *y) {
  int2 p;
  half2 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
half2 __CL_BUILTIN_ATTRIBUTES remquo(half2 x, half2 y, int2 *z) {
  int2 p;
  half2 r = remquo(x, y, &p);
  *z = p;
  return r;
}
half3 __CL_BUILTIN_ATTRIBUTES fract(half3 x, half3 *y) {
  half3 p;
  half3 r = fract(x, &p);
  *y = p;
  return r;
}
half3 __CL_BUILTIN_ATTRIBUTES modf(half3 x, half3 *y) {
  half3 p;
  half3 r = modf(x, &p);
  *y = p;
  return r;
}
half3 __CL_BUILTIN_ATTRIBUTES sincos(half3 x, half3 *y) {
  half3 p;
  half3 r = sincos(x, &p);
  *y = p;
  return r;
}
half3 __CL_BUILTIN_ATTRIBUTES frexp(half3 x, int3 *y) {
  int3 p;
  half3 r = frexp(x, &p);
  *y = p;
  return r;
}
half3 __CL_BUILTIN_ATTRIBUTES lgamma_r(half3 x, int3 *y) {
  int3 p;
  half3 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
half3 __CL_BUILTIN_ATTRIBUTES remquo(half3 x, half3 y, int3 *z) {
  int3 p;
  half3 r = remquo(x, y, &p);
  *z = p;
  return r;
}
half4 __CL_BUILTIN_ATTRIBUTES fract(half4 x, half4 *y) {
  half4 p;
  half4 r = fract(x, &p);
  *y = p;
  return r;
}
half4 __CL_BUILTIN_ATTRIBUTES modf(half4 x, half4 *y) {
  half4 p;
  half4 r = modf(x, &p);
  *y = p;
  return r;
}
half4 __CL_BUILTIN_ATTRIBUTES sincos(half4 x, half4 *y) {
  half4 p;
  half4 r = sincos(x, &p);
  *y = p;
  return r;
}
half4 __CL_BUILTIN_ATTRIBUTES frexp(half4 x, int4 *y) {
  int4 p;
  half4 r = frexp(x, &p);
  *y = p;
  return r;
}
half4 __CL_BUILTIN_ATTRIBUTES lgamma_r(half4 x, int4 *y) {
  int4 p;
  half4 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
half4 __CL_BUILTIN_ATTRIBUTES remquo(half4 x, half4 y, int4 *z) {
  int4 p;
  half4 r = remquo(x, y, &p);
  *z = p;
  return r;
}
half8 __CL_BUILTIN_ATTRIBUTES fract(half8 x, half8 *y) {
  half8 p;
  half8 r = fract(x, &p);
  *y = p;
  return r;
}
half8 __CL_BUILTIN_ATTRIBUTES modf(half8 x, half8 *y) {
  half8 p;
  half8 r = modf(x, &p);
  *y = p;
  return r;
}
half8 __CL_BUILTIN_ATTRIBUTES sincos(half8 x, half8 *y) {
  half8 p;
  half8 r = sincos(x, &p);
  *y = p;
  return r;
}
half8 __CL_BUILTIN_ATTRIBUTES frexp(half8 x, int8 *y) {
  int8 p;
  half8 r = frexp(x, &p);
  *y = p;
  return r;
}
half8 __CL_BUILTIN_ATTRIBUTES lgamma_r(half8 x, int8 *y) {
  int8 p;
  half8 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
half8 __CL_BUILTIN_ATTRIBUTES remquo(half8 x, half8 y, int8 *z) {
  int8 p;
  half8 r = remquo(x, y, &p);
  *z = p;
  return r;
}
half16 __CL_BUILTIN_ATTRIBUTES fract(half16 x, half16 *y) {
  half16 p;
  half16 r = fract(x, &p);
  *y = p;
  return r;
}
half16 __CL_BUILTIN_ATTRIBUTES modf(half16 x, half16 *y) {
  half16 p;
  half16 r = modf(x, &p);
  *y = p;
  return r;
}
half16 __CL_BUILTIN_ATTRIBUTES sincos(half16 x, half16 *y) {
  half16 p;
  half16 r = sincos(x, &p);
  *y = p;
  return r;
}
half16 __CL_BUILTIN_ATTRIBUTES frexp(half16 x, int16 *y) {
  int16 p;
  half16 r = frexp(x, &p);
  *y = p;
  return r;
}
half16 __CL_BUILTIN_ATTRIBUTES lgamma_r(half16 x, int16 *y) {
  int16 p;
  half16 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
half16 __CL_BUILTIN_ATTRIBUTES remquo(half16 x, half16 y, int16 *z) {
  int16 p;
  half16 r = remquo(x, y, &p);
  *z = p;
  return r;
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_BUILTIN_ATTRIBUTES fract(float x, float *y) {
  float p;
  float r = fract(x, &p);
  *y = p;
  return r;
}
float __CL_BUILTIN_ATTRIBUTES modf(float x, float *y) {
  float p;
  float r = modf(x, &p);
  *y = p;
  return r;
}
float __CL_BUILTIN_ATTRIBUTES sincos(float x, float *y) {
  float p;
  float r = sincos(x, &p);
  *y = p;
  return r;
}
float __CL_BUILTIN_ATTRIBUTES frexp(float x, int *y) {
  int p;
  float r = frexp(x, &p);
  *y = p;
  return r;
}
float __CL_BUILTIN_ATTRIBUTES lgamma_r(float x, int *y) {
  int p;
  float r = lgamma_r(x, &p);
  *y = p;
  return r;
}
float __CL_BUILTIN_ATTRIBUTES remquo(float x, float y, int *z) {
  int p;
  float r = remquo(x, y, &p);
  *z = p;
  return r;
}
float2 __CL_BUILTIN_ATTRIBUTES fract(float2 x, float2 *y) {
  float2 p;
  float2 r = fract(x, &p);
  *y = p;
  return r;
}
float2 __CL_BUILTIN_ATTRIBUTES modf(float2 x, float2 *y) {
  float2 p;
  float2 r = modf(x, &p);
  *y = p;
  return r;
}
float2 __CL_BUILTIN_ATTRIBUTES sincos(float2 x, float2 *y) {
  float2 p;
  float2 r = sincos(x, &p);
  *y = p;
  return r;
}
float2 __CL_BUILTIN_ATTRIBUTES frexp(float2 x, int2 *y) {
  int2 p;
  float2 r = frexp(x, &p);
  *y = p;
  return r;
}
float2 __CL_BUILTIN_ATTRIBUTES lgamma_r(float2 x, int2 *y) {
  int2 p;
  float2 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
float2 __CL_BUILTIN_ATTRIBUTES remquo(float2 x, float2 y, int2 *z) {
  int2 p;
  float2 r = remquo(x, y, &p);
  *z = p;
  return r;
}
float3 __CL_BUILTIN_ATTRIBUTES fract(float3 x, float3 *y) {
  float3 p;
  float3 r = fract(x, &p);
  *y = p;
  return r;
}
float3 __CL_BUILTIN_ATTRIBUTES modf(float3 x, float3 *y) {
  float3 p;
  float3 r = modf(x, &p);
  *y = p;
  return r;
}
float3 __CL_BUILTIN_ATTRIBUTES sincos(float3 x, float3 *y) {
  float3 p;
  float3 r = sincos(x, &p);
  *y = p;
  return r;
}
float3 __CL_BUILTIN_ATTRIBUTES frexp(float3 x, int3 *y) {
  int3 p;
  float3 r = frexp(x, &p);
  *y = p;
  return r;
}
float3 __CL_BUILTIN_ATTRIBUTES lgamma_r(float3 x, int3 *y) {
  int3 p;
  float3 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
float3 __CL_BUILTIN_ATTRIBUTES remquo(float3 x, float3 y, int3 *z) {
  int3 p;
  float3 r = remquo(x, y, &p);
  *z = p;
  return r;
}
float4 __CL_BUILTIN_ATTRIBUTES fract(float4 x, float4 *y) {
  float4 p;
  float4 r = fract(x, &p);
  *y = p;
  return r;
}
float4 __CL_BUILTIN_ATTRIBUTES modf(float4 x, float4 *y) {
  float4 p;
  float4 r = modf(x, &p);
  *y = p;
  return r;
}
float4 __CL_BUILTIN_ATTRIBUTES sincos(float4 x, float4 *y) {
  float4 p;
  float4 r = sincos(x, &p);
  *y = p;
  return r;
}
float4 __CL_BUILTIN_ATTRIBUTES frexp(float4 x, int4 *y) {
  int4 p;
  float4 r = frexp(x, &p);
  *y = p;
  return r;
}
float4 __CL_BUILTIN_ATTRIBUTES lgamma_r(float4 x, int4 *y) {
  int4 p;
  float4 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
float4 __CL_BUILTIN_ATTRIBUTES remquo(float4 x, float4 y, int4 *z) {
  int4 p;
  float4 r = remquo(x, y, &p);
  *z = p;
  return r;
}
float8 __CL_BUILTIN_ATTRIBUTES fract(float8 x, float8 *y) {
  float8 p;
  float8 r = fract(x, &p);
  *y = p;
  return r;
}
float8 __CL_BUILTIN_ATTRIBUTES modf(float8 x, float8 *y) {
  float8 p;
  float8 r = modf(x, &p);
  *y = p;
  return r;
}
float8 __CL_BUILTIN_ATTRIBUTES sincos(float8 x, float8 *y) {
  float8 p;
  float8 r = sincos(x, &p);
  *y = p;
  return r;
}
float8 __CL_BUILTIN_ATTRIBUTES frexp(float8 x, int8 *y) {
  int8 p;
  float8 r = frexp(x, &p);
  *y = p;
  return r;
}
float8 __CL_BUILTIN_ATTRIBUTES lgamma_r(float8 x, int8 *y) {
  int8 p;
  float8 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
float8 __CL_BUILTIN_ATTRIBUTES remquo(float8 x, float8 y, int8 *z) {
  int8 p;
  float8 r = remquo(x, y, &p);
  *z = p;
  return r;
}
float16 __CL_BUILTIN_ATTRIBUTES fract(float16 x, float16 *y) {
  float16 p;
  float16 r = fract(x, &p);
  *y = p;
  return r;
}
float16 __CL_BUILTIN_ATTRIBUTES modf(float16 x, float16 *y) {
  float16 p;
  float16 r = modf(x, &p);
  *y = p;
  return r;
}
float16 __CL_BUILTIN_ATTRIBUTES sincos(float16 x, float16 *y) {
  float16 p;
  float16 r = sincos(x, &p);
  *y = p;
  return r;
}
float16 __CL_BUILTIN_ATTRIBUTES frexp(float16 x, int16 *y) {
  int16 p;
  float16 r = frexp(x, &p);
  *y = p;
  return r;
}
float16 __CL_BUILTIN_ATTRIBUTES lgamma_r(float16 x, int16 *y) {
  int16 p;
  float16 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
float16 __CL_BUILTIN_ATTRIBUTES remquo(float16 x, float16 y, int16 *z) {
  int16 p;
  float16 r = remquo(x, y, &p);
  *z = p;
  return r;
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_BUILTIN_ATTRIBUTES fract(double x, double *y) {
  double p;
  double r = fract(x, &p);
  *y = p;
  return r;
}
double __CL_BUILTIN_ATTRIBUTES modf(double x, double *y) {
  double p;
  double r = modf(x, &p);
  *y = p;
  return r;
}
double __CL_BUILTIN_ATTRIBUTES sincos(double x, double *y) {
  double p;
  double r = sincos(x, &p);
  *y = p;
  return r;
}
double __CL_BUILTIN_ATTRIBUTES frexp(double x, int *y) {
  int p;
  double r = frexp(x, &p);
  *y = p;
  return r;
}
double __CL_BUILTIN_ATTRIBUTES lgamma_r(double x, int *y) {
  int p;
  double r = lgamma_r(x, &p);
  *y = p;
  return r;
}
double __CL_BUILTIN_ATTRIBUTES remquo(double x, double y, int *z) {
  int p;
  double r = remquo(x, y, &p);
  *z = p;
  return r;
}
double2 __CL_BUILTIN_ATTRIBUTES fract(double2 x, double2 *y) {
  double2 p;
  double2 r = fract(x, &p);
  *y = p;
  return r;
}
double2 __CL_BUILTIN_ATTRIBUTES modf(double2 x, double2 *y) {
  double2 p;
  double2 r = modf(x, &p);
  *y = p;
  return r;
}
double2 __CL_BUILTIN_ATTRIBUTES sincos(double2 x, double2 *y) {
  double2 p;
  double2 r = sincos(x, &p);
  *y = p;
  return r;
}
double2 __CL_BUILTIN_ATTRIBUTES frexp(double2 x, int2 *y) {
  int2 p;
  double2 r = frexp(x, &p);
  *y = p;
  return r;
}
double2 __CL_BUILTIN_ATTRIBUTES lgamma_r(double2 x, int2 *y) {
  int2 p;
  double2 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
double2 __CL_BUILTIN_ATTRIBUTES remquo(double2 x, double2 y, int2 *z) {
  int2 p;
  double2 r = remquo(x, y, &p);
  *z = p;
  return r;
}
double3 __CL_BUILTIN_ATTRIBUTES fract(double3 x, double3 *y) {
  double3 p;
  double3 r = fract(x, &p);
  *y = p;
  return r;
}
double3 __CL_BUILTIN_ATTRIBUTES modf(double3 x, double3 *y) {
  double3 p;
  double3 r = modf(x, &p);
  *y = p;
  return r;
}
double3 __CL_BUILTIN_ATTRIBUTES sincos(double3 x, double3 *y) {
  double3 p;
  double3 r = sincos(x, &p);
  *y = p;
  return r;
}
double3 __CL_BUILTIN_ATTRIBUTES frexp(double3 x, int3 *y) {
  int3 p;
  double3 r = frexp(x, &p);
  *y = p;
  return r;
}
double3 __CL_BUILTIN_ATTRIBUTES lgamma_r(double3 x, int3 *y) {
  int3 p;
  double3 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
double3 __CL_BUILTIN_ATTRIBUTES remquo(double3 x, double3 y, int3 *z) {
  int3 p;
  double3 r = remquo(x, y, &p);
  *z = p;
  return r;
}
double4 __CL_BUILTIN_ATTRIBUTES fract(double4 x, double4 *y) {
  double4 p;
  double4 r = fract(x, &p);
  *y = p;
  return r;
}
double4 __CL_BUILTIN_ATTRIBUTES modf(double4 x, double4 *y) {
  double4 p;
  double4 r = modf(x, &p);
  *y = p;
  return r;
}
double4 __CL_BUILTIN_ATTRIBUTES sincos(double4 x, double4 *y) {
  double4 p;
  double4 r = sincos(x, &p);
  *y = p;
  return r;
}
double4 __CL_BUILTIN_ATTRIBUTES frexp(double4 x, int4 *y) {
  int4 p;
  double4 r = frexp(x, &p);
  *y = p;
  return r;
}
double4 __CL_BUILTIN_ATTRIBUTES lgamma_r(double4 x, int4 *y) {
  int4 p;
  double4 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
double4 __CL_BUILTIN_ATTRIBUTES remquo(double4 x, double4 y, int4 *z) {
  int4 p;
  double4 r = remquo(x, y, &p);
  *z = p;
  return r;
}
double8 __CL_BUILTIN_ATTRIBUTES fract(double8 x, double8 *y) {
  double8 p;
  double8 r = fract(x, &p);
  *y = p;
  return r;
}
double8 __CL_BUILTIN_ATTRIBUTES modf(double8 x, double8 *y) {
  double8 p;
  double8 r = modf(x, &p);
  *y = p;
  return r;
}
double8 __CL_BUILTIN_ATTRIBUTES sincos(double8 x, double8 *y) {
  double8 p;
  double8 r = sincos(x, &p);
  *y = p;
  return r;
}
double8 __CL_BUILTIN_ATTRIBUTES frexp(double8 x, int8 *y) {
  int8 p;
  double8 r = frexp(x, &p);
  *y = p;
  return r;
}
double8 __CL_BUILTIN_ATTRIBUTES lgamma_r(double8 x, int8 *y) {
  int8 p;
  double8 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
double8 __CL_BUILTIN_ATTRIBUTES remquo(double8 x, double8 y, int8 *z) {
  int8 p;
  double8 r = remquo(x, y, &p);
  *z = p;
  return r;
}
double16 __CL_BUILTIN_ATTRIBUTES fract(double16 x, double16 *y) {
  double16 p;
  double16 r = fract(x, &p);
  *y = p;
  return r;
}
double16 __CL_BUILTIN_ATTRIBUTES modf(double16 x, double16 *y) {
  double16 p;
  double16 r = modf(x, &p);
  *y = p;
  return r;
}
double16 __CL_BUILTIN_ATTRIBUTES sincos(double16 x, double16 *y) {
  double16 p;
  double16 r = sincos(x, &p);
  *y = p;
  return r;
}
double16 __CL_BUILTIN_ATTRIBUTES frexp(double16 x, int16 *y) {
  int16 p;
  double16 r = frexp(x, &p);
  *y = p;
  return r;
}
double16 __CL_BUILTIN_ATTRIBUTES lgamma_r(double16 x, int16 *y) {
  int16 p;
  double16 r = lgamma_r(x, &p);
  *y = p;
  return r;
}
double16 __CL_BUILTIN_ATTRIBUTES remquo(double16 x, double16 y, int16 *z) {
  int16 p;
  double16 r = remquo(x, y, &p);
  *z = p;
  return r;
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // OCL_CLBUILTINS_30_H_INCLUDED
